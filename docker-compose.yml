services:
  messaging-api:
    container_name: messaging-api
    build:
      context: .
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    restart: "on-failure"
    networks:
      - messaging-api

  frontend:
    container_name: frontend
    build:
      context: ./vue
    volumes:
      - ./vue:/app
    command: npm run dev -- --host 0.0.0.0
    depends_on:
      - messaging-api
    networks:
      - messaging-api

  db:
    image: postgres:13
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - messaging-api
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest
    ports:
      - 8080:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - messaging-api
      - frontend
    networks:
      - messaging-api
    restart: "on-failure"

  redis:
    image: "redis:alpine"
    container_name: redis
    networks:
      - messaging-api

networks:
  messaging-api:
    driver: bridge

volumes:
  postgres_data:
